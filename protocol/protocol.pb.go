// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	protocol.proto

It has these top-level messages:
	AppendRequest
	AppendReply
	ReadRequest
	ReadReply
	ListLogsRequest
	ListLogsReply
	CreateLogRequest
	CreateLogReply
	DeleteLogRequest
	DeleteLogResponse
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppendRequest struct {
	LogName string `protobuf:"bytes,1,opt,name=log_name,json=logName" json:"log_name,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AppendRequest) Reset()                    { *m = AppendRequest{} }
func (m *AppendRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()               {}
func (*AppendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppendRequest) GetLogName() string {
	if m != nil {
		return m.LogName
	}
	return ""
}

func (m *AppendRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppendReply struct {
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
}

func (m *AppendReply) Reset()                    { *m = AppendReply{} }
func (m *AppendReply) String() string            { return proto.CompactTextString(m) }
func (*AppendReply) ProtoMessage()               {}
func (*AppendReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppendReply) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReadRequest struct {
	LogName     string `protobuf:"bytes,1,opt,name=log_name,json=logName" json:"log_name,omitempty"`
	Index       uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	MaxWaitTime uint32 `protobuf:"varint,3,opt,name=max_wait_time,json=maxWaitTime" json:"max_wait_time,omitempty"`
	MinBytes    uint32 `protobuf:"varint,4,opt,name=min_bytes,json=minBytes" json:"min_bytes,omitempty"`
	MaxBytes    uint32 `protobuf:"varint,5,opt,name=max_bytes,json=maxBytes" json:"max_bytes,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadRequest) GetLogName() string {
	if m != nil {
		return m.LogName
	}
	return ""
}

func (m *ReadRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReadRequest) GetMaxWaitTime() uint32 {
	if m != nil {
		return m.MaxWaitTime
	}
	return 0
}

func (m *ReadRequest) GetMinBytes() uint32 {
	if m != nil {
		return m.MinBytes
	}
	return 0
}

func (m *ReadRequest) GetMaxBytes() uint32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

type ReadReply struct {
	Data      [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	NextIndex uint64   `protobuf:"varint,2,opt,name=next_index,json=nextIndex" json:"next_index,omitempty"`
}

func (m *ReadReply) Reset()                    { *m = ReadReply{} }
func (m *ReadReply) String() string            { return proto.CompactTextString(m) }
func (*ReadReply) ProtoMessage()               {}
func (*ReadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadReply) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadReply) GetNextIndex() uint64 {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

type ListLogsRequest struct {
}

func (m *ListLogsRequest) Reset()                    { *m = ListLogsRequest{} }
func (m *ListLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListLogsRequest) ProtoMessage()               {}
func (*ListLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ListLogsReply struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *ListLogsReply) Reset()                    { *m = ListLogsReply{} }
func (m *ListLogsReply) String() string            { return proto.CompactTextString(m) }
func (*ListLogsReply) ProtoMessage()               {}
func (*ListLogsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListLogsReply) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type CreateLogRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Retention uint32 `protobuf:"varint,2,opt,name=retention" json:"retention,omitempty"`
}

func (m *CreateLogRequest) Reset()                    { *m = CreateLogRequest{} }
func (m *CreateLogRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateLogRequest) ProtoMessage()               {}
func (*CreateLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateLogRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateLogRequest) GetRetention() uint32 {
	if m != nil {
		return m.Retention
	}
	return 0
}

type CreateLogReply struct {
}

func (m *CreateLogReply) Reset()                    { *m = CreateLogReply{} }
func (m *CreateLogReply) String() string            { return proto.CompactTextString(m) }
func (*CreateLogReply) ProtoMessage()               {}
func (*CreateLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DeleteLogRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteLogRequest) Reset()                    { *m = DeleteLogRequest{} }
func (m *DeleteLogRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteLogRequest) ProtoMessage()               {}
func (*DeleteLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteLogRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteLogResponse struct {
}

func (m *DeleteLogResponse) Reset()                    { *m = DeleteLogResponse{} }
func (m *DeleteLogResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteLogResponse) ProtoMessage()               {}
func (*DeleteLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*AppendRequest)(nil), "AppendRequest")
	proto.RegisterType((*AppendReply)(nil), "AppendReply")
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadReply)(nil), "ReadReply")
	proto.RegisterType((*ListLogsRequest)(nil), "ListLogsRequest")
	proto.RegisterType((*ListLogsReply)(nil), "ListLogsReply")
	proto.RegisterType((*CreateLogRequest)(nil), "CreateLogRequest")
	proto.RegisterType((*CreateLogReply)(nil), "CreateLogReply")
	proto.RegisterType((*DeleteLogRequest)(nil), "DeleteLogRequest")
	proto.RegisterType((*DeleteLogResponse)(nil), "DeleteLogResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Log service

type LogClient interface {
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsReply, error)
	CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*CreateLogReply, error)
	DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...grpc.CallOption) (*DeleteLogResponse, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error) {
	out := new(AppendReply)
	err := grpc.Invoke(ctx, "/Log/Append", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := grpc.Invoke(ctx, "/Log/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsReply, error) {
	out := new(ListLogsReply)
	err := grpc.Invoke(ctx, "/Log/ListLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*CreateLogReply, error) {
	out := new(CreateLogReply)
	err := grpc.Invoke(ctx, "/Log/CreateLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...grpc.CallOption) (*DeleteLogResponse, error) {
	out := new(DeleteLogResponse)
	err := grpc.Invoke(ctx, "/Log/DeleteLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Log service

type LogServer interface {
	Append(context.Context, *AppendRequest) (*AppendReply, error)
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	ListLogs(context.Context, *ListLogsRequest) (*ListLogsReply, error)
	CreateLog(context.Context, *CreateLogRequest) (*CreateLogReply, error)
	DeleteLog(context.Context, *DeleteLogRequest) (*DeleteLogResponse, error)
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Log/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Log/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Log/ListLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).ListLogs(ctx, req.(*ListLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Log/CreateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).CreateLog(ctx, req.(*CreateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_DeleteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).DeleteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Log/DeleteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).DeleteLog(ctx, req.(*DeleteLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _Log_Append_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Log_Read_Handler,
		},
		{
			MethodName: "ListLogs",
			Handler:    _Log_ListLogs_Handler,
		},
		{
			MethodName: "CreateLog",
			Handler:    _Log_CreateLog_Handler,
		},
		{
			MethodName: "DeleteLog",
			Handler:    _Log_DeleteLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x80, 0x93, 0x6d, 0x76, 0xa9, 0xa7, 0x4d, 0xb7, 0x1d, 0x38, 0x94, 0x00, 0x52, 0x65, 0x04,
	0xea, 0xc9, 0x12, 0x3f, 0xe7, 0x95, 0x80, 0xbd, 0x20, 0x55, 0x1c, 0x2c, 0x24, 0x8e, 0x91, 0x97,
	0x8e, 0x22, 0x4b, 0xb1, 0x1d, 0x1a, 0x23, 0xd2, 0x77, 0xe1, 0x11, 0x79, 0x08, 0x14, 0xb7, 0xe9,
	0xa6, 0xe1, 0xc0, 0xde, 0xe6, 0xa7, 0x1e, 0xfb, 0xfb, 0xa6, 0x81, 0x59, 0xb5, 0x73, 0xde, 0x7d,
	0x77, 0xa5, 0x08, 0x01, 0xbf, 0x81, 0xf4, 0x43, 0x55, 0x91, 0xdd, 0x4a, 0xfa, 0xf1, 0x93, 0x6a,
	0x8f, 0x4f, 0x61, 0x5c, 0xba, 0x22, 0xb7, 0xca, 0xd0, 0x32, 0x5e, 0xc5, 0x6b, 0x26, 0x1f, 0x95,
	0xae, 0xf8, 0xa2, 0x0c, 0x21, 0x42, 0xb2, 0x55, 0x5e, 0x2d, 0x2f, 0x56, 0xf1, 0x7a, 0x2a, 0x43,
	0xcc, 0x5f, 0xc2, 0xa4, 0x3b, 0x5f, 0x95, 0x7b, 0x7c, 0x02, 0x97, 0xda, 0x6e, 0xa9, 0x09, 0x47,
	0x13, 0x79, 0x48, 0xf8, 0xef, 0x18, 0x26, 0x92, 0xd4, 0x43, 0xee, 0x38, 0x0d, 0xb8, 0xe8, 0x0d,
	0x40, 0x0e, 0xa9, 0x51, 0x4d, 0xfe, 0x4b, 0x69, 0x9f, 0x7b, 0x6d, 0x68, 0x39, 0x5a, 0xc5, 0xeb,
	0x54, 0x4e, 0x8c, 0x6a, 0xbe, 0x29, 0xed, 0xbf, 0x6a, 0x43, 0xf8, 0x0c, 0x98, 0xd1, 0x36, 0xbf,
	0xdb, 0x7b, 0xaa, 0x97, 0x49, 0xe8, 0x8f, 0x8d, 0xb6, 0x1f, 0xdb, 0x3c, 0x34, 0x55, 0x73, 0x6c,
	0x5e, 0x1e, 0x9b, 0xaa, 0x09, 0x4d, 0x7e, 0x03, 0xec, 0xf0, 0xba, 0x96, 0xa0, 0x83, 0x8c, 0x57,
	0xa3, 0x0e, 0x12, 0x5f, 0x00, 0x58, 0x6a, 0x7c, 0xde, 0x7f, 0x19, 0x6b, 0x2b, 0x9f, 0x03, 0xde,
	0x02, 0xae, 0x37, 0xba, 0xf6, 0x1b, 0x57, 0xd4, 0x47, 0x42, 0xfe, 0x0a, 0xd2, 0xfb, 0xd2, 0x51,
	0x4c, 0x8b, 0x5b, 0x87, 0xb9, 0x4c, 0x1e, 0x12, 0x7e, 0x0b, 0xf3, 0x4f, 0x3b, 0x52, 0x9e, 0x36,
	0xae, 0xe8, 0xe4, 0x20, 0x24, 0x3d, 0x31, 0x21, 0xc6, 0xe7, 0xc0, 0x76, 0xe4, 0xc9, 0x7a, 0xed,
	0x6c, 0xb8, 0x3f, 0x95, 0xf7, 0x05, 0x3e, 0x87, 0x59, 0x6f, 0x4a, 0x55, 0xee, 0xf9, 0x6b, 0x98,
	0xdf, 0x52, 0x49, 0xff, 0x9b, 0xcb, 0x1f, 0xc3, 0xa2, 0xf7, 0xbb, 0xba, 0x72, 0xb6, 0xa6, 0xb7,
	0x7f, 0x62, 0x18, 0x6d, 0x5c, 0x81, 0x6b, 0xb8, 0x3a, 0xac, 0x16, 0x67, 0xe2, 0xec, 0x3f, 0x92,
	0x4d, 0x45, 0x6f, 0xe7, 0x3c, 0x42, 0x0e, 0x49, 0x2b, 0x10, 0xa7, 0xa2, 0xb7, 0xe5, 0x0c, 0xc4,
	0xc9, 0x2a, 0x8f, 0x50, 0xc0, 0xb8, 0x33, 0x82, 0x73, 0x31, 0xf0, 0x95, 0xcd, 0xc4, 0x99, 0x2e,
	0x1e, 0xe1, 0x1b, 0x60, 0x27, 0x28, 0x5c, 0x88, 0xa1, 0xa6, 0xec, 0x5a, 0x0c, 0x98, 0x23, 0x7c,
	0x0f, 0xec, 0x44, 0x83, 0x0b, 0x31, 0x34, 0x90, 0xa1, 0xf8, 0x07, 0x96, 0x47, 0x77, 0x57, 0xe1,
	0x43, 0x78, 0xf7, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x79, 0xfa, 0x97, 0x1a, 0x03, 0x00, 0x00,
}
